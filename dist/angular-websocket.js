!function(){"use strict";function n(n,s){this.websocket=null,this.connected=!1,this.hasPreviousConnection=!1,this.session=null,this.setConfig=function(n){this.config=n,!1===this.config.hasOwnProperty("debug")&&(this.config.debug=!1)},this.getConfig=function(){return this.config},this.getSession=function(){return this.session},this.connect=function(){var t=s.defer(),i=!0===this.config.secured?"wss":"ws";return this.websocket=WS.connect(i+"://"+this.config.host+":"+this.config.port),this.websocket.on("socket/connect",function(s){this.connected=!0,this.session=s,t.resolve(s),t.promise.then(function(s){!0===this.config.debug&&console.log("connected to "+this.config.host),n.$broadcast("ws:connect",s)}.bind(this),function(n){!0===this.config.debug&&console.log("unable to connected to "+this.config.host)}.bind(this))}.bind(this)),t.promise},this.publish=function(n,s){this.session.publish(n,s)},this.subscribe=function(s){this.session.subscribe(s,function(s,t){n.$broadcast("ws:["+s+"]:publication",t)}.bind(this))},this.disconnect=function(){var t=s.defer();return this.websocket.on("socket/disconnect",function(n){t.resolve(n)}),t.promise.then(function(s){this.connected=!1,this.session=null,this.hasPreviousConnection=!0,!0===this.config.debug&&console.log("Disconnected for "+s.reason+" with code "+s.code),n.$broadcast("ws:disconnect",s)}.bind(this)),t.promise},this.isConnected=function(){return this.connected}}angular.module("GosWebsocket",[]).service("WebsocketService",n),n.$inject=["$rootScope","$q"]}();